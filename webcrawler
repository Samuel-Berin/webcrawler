#!/usr/bin/python

import argparse
import sys
import xml
import socket
import json
import datetime
from HTMLParser import HTMLParser


class myHtmlParser(HTMLParser):
    getThisFlag = False
    secret_flags = []
    follow_up_links = []

    def handle_starttag(self, tag, attrs):
        if tag == "h2":
            for attr in attrs:
                if attr[0] == 'class' and attr[1] == 'secret_flag':
                    self.getThisFlag = True

        if tag == "a":
            for attr in attrs:
                if attr[0] == 'href' and not "edu" in attr[1]:
                    #print(attr[1] + "\n\n")
                    self.follow_up_links.append(attr[1])

    def handle_data(self, data):
        if (self.getThisFlag and data not in self.secret_flags):
            self.secret_flags.append(data)
        self.getThisFlag = False


    def getFlags(self):
        return self.secret_flags

    def getFollowUpLinks(self):
        return self.follow_up_links

    def clearFollowups(self):
      self.follow_up_links = []

parser = argparse.ArgumentParser(description='Crawls Fakebook for secret flags.')
parser.add_argument(type=str, dest="username", help='The username.')
parser.add_argument(type=str, dest="password", help='The password.')

args = parser.parse_args(sys.argv[1:])
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
fakebook_IP = socket.gethostbyname(socket.gethostname())
host = socket.gethostbyname("fring.ccs.neu.edu")
dest = (fakebook_IP, 80)
sock.connect((host, 80))
sock.settimeout(10)


htmlparser = myHtmlParser()
csrf_Cookie = ""
session_Cookie = ""
visited = []
to_visit = []


def handleResponse(result, url):
    handle_code = result[:result.index("\n")]
    print(handle_code)

    if "200" in handle_code or "302" in handle_code:
        result = result.split('<html>')
        html = ""

        if (len(result) > 1):
            html = "<html>" + result[1]

        return html
    elif "404" in handle_code or "403" in handle_code:
        to_visit.remove(url)
        return GETRequest(to_visit[0])
    elif "500" in handle_code:
        return GETRequest(url)
    elif "301" in handle_code:
        print "Howdy!"
    elif "0\r" == handle_code:
        return GETRequest(url)
    else:
        print("DONE!\n")
        print(result)
        sys.exit()




def GETLogin():
  global csrf_Cookie, session_Cookie
  sock.send("GET /accounts/login/?next=/fakebook/ HTTP/1.1\r\n")
  sock.send("Connection: keep-alive\r\n")
  sock.send("From: weinstein.br@husky.neu.edu\r\n")
  sock.send("User-Agent: Mozilla/5.0\r\n")
  sock.send("Host: fring.ccs.neu.edu\r\n")
  sock.send("\r\n")
  result = sock.recv(1400)
  result += sock.recv(1400)
  #Print the results of the GET Request
  #Set the csrf and session
  result = result[result.index("Set-Cookie") + 12:]
  csrf_Cookie = result[:result.index(";")]
  csrf_Cookie = csrf_Cookie[10:]   #Gets rid of csrf tag
  result = result[result.index("Set-Cookie") + 12:]
  session_Cookie = result[:result.index(";")]

def GETRequest(url):
  global csrf_Cookie, session_Cookie, sock, host
  print("Visiting: " + url)
  sock.send("GET " + url + " HTTP/1.1\r\n")
  sock.send("Connection: keep-alive\r\n")
  sock.send("From: weinstein.br@husky.neu.edu\r\n")
  sock.send("User-Agent: Mozilla/5.0\r\n")
  sock.send("Host: fring.ccs.neu.edu\r\n")
  sock.send("Cookie: csrftoken=" + csrf_Cookie + "; sessionid=" + session_Cookie + "\r\n")
  sock.send("\r\n")
  result = sock.recv(1400)


  while len(result) != 0 and "HTTP/1.1 200 OK" in result and "</html>" not in result:
      result += sock.recv(1400)


  if(len(result) == 0 or "HTTP" not in result):
      print("Socket Closed")
      print("result: " + result)
      sock.close()
      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      sock.connect((host, 80))
      sock.settimeout(10)
      return GETRequest(url)
  else:
      #Print the results of the GET Request
      response = handleResponse(result, url)
      return response

def POSTLogin():
  global csrf_Cookie, session_Cookie
  sock.send("POST /accounts/login/ HTTP/1.1 \r\n")
  sock.send("Host: fring.ccs.neu.edu\r\n")
  sock.send("User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0\r\n")
  sock.send("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n")
  sock.send("Accept-Language: en-US,en;q=0.5\r\n")
  sock.send("Accept-Encoding: gzip, deflate\r\n")
  sock.send("Referer: http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/\r\n")
  sock.send("Content-Type: application/x-www-form-urlencoded\r\n")
  sock.send("Content-Length: 109\r\n")
  sock.send("Cookie: csrftoken=" + csrf_Cookie + "; " + session_Cookie + "\r\n")
  sock.send("Connection: keep-alive\r\n")
  sock.send("Upgrade-Insecure-Requests: 1\r\n")
  sock.send("\r\n")
  #sock.send("username=" + str(args.username) + "&password=" + str(args.password) + "&csrfmiddlewaretoken=" + csrf_Cookie + "&next=%2Ffakebook%2F\r\n")
  sock.send("username=" + args.username + "&password=" + args.password + "&csrfmiddlewaretoken=" + csrf_Cookie + "&next=%2Ffakebook%2F\r\n")
  sock.send("\r\n")
  result = sock.recv(1400)
  result = result[result.index("Set-Cookie") + 12:]
  session_Cookie = result[:result.index(";")]
  session_Cookie = session_Cookie[10:]

GETLogin()
POSTLogin()

to_visit.append("/fakebook/")

while(len(htmlparser.getFlags()) < 5):
    get = GETRequest(to_visit[0])

    htmlparser.clearFollowups()
    htmlparser.feed(get)

    if (len(htmlparser.getFollowUpLinks()) == 0):
        sys.exit()


    visited.append(to_visit[0])
    print("Checked: " + str(len(visited)))
    to_visit.pop(0)

    for link in htmlparser.getFollowUpLinks():
        if link not in visited:
            to_visit.append(link)

    print("Found " + str(len(htmlparser.getFlags())) + " flag(s)")

print("Flags: \n")
for flag in htmlparser.getFlags():
    print flag[flag.index(" "):] + "\n"
